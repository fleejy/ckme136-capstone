summary(hoq$h_pex)
hoq[1]
hoq[9]
hoq[8]
hoq[[8]]
createOrder
hoq$h_type
createOrder
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging
str(hoq)
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
str(hoq)
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("Low Hospital Quality", "High Hospital Quality"))
hoq$h_rating
summary(hoq$h_rating)
str(hoq)
summary(hoq$h_type)
summary(hoq$h_rating)
2849+550
2435+964
pwd
cwd
wd
knitr::opts_chunk$set(echo = TRUE)
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
str(mhi_email)
library(ggplot2)
library(reshape2)
gg <- melt(mhi_email,id="date",value.name="Frequencies", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
facet_grid(Type~.)
library(ggplot2)
library(reshape2)
gg <- melt(mhi_email,id="date",value.name="Frequencies", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
facet_grid(Sender~.)
gg <- melt(mhi_email,id="date",value.name="Freq", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
facet_grid(Sender~.)
summary(mhi_email$date)
summary(mhi_email$from)
gg <- melt(mhi_email,id="date",value.name="Freq", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
coord_flip()+
facet_grid(Sender)
gg <- melt(mhi_email,id="date",value.name="Freq", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
coord_flip()+
facet_grid(Sender~.)
barplot(table(mhi_email$from))
barplot(table(mhi_email$date))
g2 <- ggplot(data = mhi_email, aes(x = frequency, y = percent, fill = category)) + geom_bar(stat = "identity", position = position_dodge()) + xlab("Frequency of Father Visits") + ylab("Percent of Children")
g2
g2 <- ggplot(data = mhi_email, aes(x = date, y = from, fill = category)) + geom_bar(stat = "identity", position = position_dodge()) + xlab("Frequency of Father Visits") + ylab("Percent of Children")
g2
barplot(table(mhi_email$from))
barplot(table(mhi_email$date))
gg <- melt(df,id="date",value.name="Freq", variable.name="Type")
ggplot(gg, aes(x=date, y=Freq, fill=Type))+
geom_bar(stat="identity")+
facet_grid(Type~.)
gg <- melt(mhi_email,id="date",value.name="Freq", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
facet_grid(Sender~.)
View(mhi_email)
View(mhi_email)
str(mhi_email)
length(mhi_email$date)
? which
mhi_email$from
summary(mhi_email$from)
which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca")
mhi_email$date
mhi_email[,1]
mhi_email[20]
mhi_email[,20]
mhi_email[20,]
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"),]
str(oneFrom)
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"),]
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"), c("date","from","to","cc")]
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"), c("date","from","to","cc")]
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))
onlyStat <- mhi_email[, c("date","from","to","cc")]
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
library(ggplot2)
library(reshape2)
onlyStat <- mhi_email[, c("date","from","to","cc")]
str(mhi_email)
gg2 <- melt(onlyStat, id='group')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = group, y = value, fill = variable)) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = variable)) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = "from")) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
barplot(table(mhi_email$date))
knitr::opts_chunk$set(echo = TRUE)
gg1 <- melt(onlyStat, id="date") #, value.name="Freq", variable.name="from")
plot(onlyStat)
hist(x = onlyStat$date, freq = onlyStat$from, breaks = 22)
hist(x = summary(onlyStat$date), freq = onlyStat$from, breaks = 22)
hist(x = table(onlyStat$date), freq = onlyStat$from, breaks = 22)
table(onlyStat$date)
summary(onlyStat$date)
gg2 <- melt(onlyStat, id="date")
library(ggplot2)
library(reshape2)
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = "from")) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="from")
ggplot(gg2, aes(x = date, y = value, fill = "from")) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = "from")) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
library(plyr)
count(onlyStat, 'date')
count(onlyStat, 'from')
is.na(onlyStat)
which(is.na(onlyStat))
which(is.na(onlyStat$from))
which(is.na(onlyStat$from) == TRUE)
which(is.na(onlyStat$from) == FALSE)
length(which(is.na(onlyStat$from) == FALSE))
count(onlyStat, 'from')
d <- count(onlyStat, 'date')
f <- count(onlyStat, 'from')
rbind.data.frame(d, f)
plot(d)
qplot(onlyStat$date,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(20,50))
qplot(d,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(20,50))
qplot(d$freq,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(20,50))
qplot(d$freq,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(20,50))
qplot(d$freq,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(0,20))
qplot(d$freq,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = "Date",
fill=I("blue"),
col=I("red"),
alpha=I(.2))
qplot(d$freq,
geom="histogram",
binwidth = 0.5,
main = "Histogram for Date",
xlab = d$date,
fill=I("blue"),
col=I("red"),
alpha=I(.2))
unique(d$date)
as.Date(d$date)
d$date
na.omit(onlyData)
na.omit(onlyStat)
format(onlyStat$date, "%Y-%m-%d")
format(onlyStat$date, "%m-%d")
format(onlyStat$date, format="%m-%d")
unique(format(onlyStat$date, format="%m-%d"))
length(unique(format(onlyStat$date, format="%m-%d")))
which(unique(format(onlyStat$date, format="%m-%d")))
unique(format(onlyStat$date, format="%m-%d"))
View(mhi_email)
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
library(ggplot2)
library(reshape2)
barplot(table(mhi_email$date))
unique(format(onlyStat$date, format="%m-%d"))
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
# Frequency Distribution by email
library(ggplot2)
library(reshape2)
str(mhi_email)
ggplot(mhi_email, aes(x = factor(date))) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("date")
ggplot(mhi_email, aes(x = factor(date), y = factor(from))) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("ID")
ggplot(mhi_email, aes(x = factor(date), y = factor(from))) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date")
mhi_email$from[1]
mhi_email$from[2]
mhi_email$from[3]
ggplot(mhi_email, aes(x = factor(date), y = factor(from))) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date")
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
library(ggplot2)
library(reshape2)
summary(mhi_email)
sapply(mhi_email,function(x) sum(is.na(x)))
setwd("~/Education/UofToronto (2018-2019)/")
mhi_email <- read.csv(file="mhi-email.csv", header = TRUE)
summary(mhi_email)
sapply(mhi_email,function(x) sum(is.na(x)))
library(ggplot2)
library(reshape2)
str(mhi_email)
ggplot(mhi_email, aes(x = factor(date), y = factor(from))) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
xlab("Date")
ggplot(mhi_email, aes(x = date)) +
geom_histogram() +
facet_grid(~type)
ggplot(mhi_email, aes(x = date)) +
geom_histogram() +
facet_grid(~date)
ggplot(mhi_email, aes(x = date)) +
geom_histogram() +
facet_grid(~from)
ggplot(mhi_email, aes(x = date)) + theme_bw() + geom_bar(stat = "identity")
ggplot(mhi_email, aes(x = factor(date), y = date)) + theme_bw() + geom_bar(stat = "identity")
factor(date)
unique(mhi_email$date)
ggplot(mhi_email, aes(x = unique(date), y = date)) + theme_bw() + geom_bar(stat = "identity")
ggplot(mhi_email, aes(x = unique(date), y = factor(date))) + theme_bw() + geom_bar(stat = "identity")
ggplot(mhi_email, aes(x = unique(date), y = factor(date))) + theme_bw() + geom_bar(stat = "identity")
freq_tab <- table(mhi_email$date)
freq_tab
barplot(freq_tab)
summary(freq_tab)
unique(freq_tab)
fact(freq_tab)
factor(freq_tab)
ggplot(freq_tab, aes(x = factor(freq_tab))) + theme_bw() + geom_bar(stat = "identity")
ggplot(mhi_email, aes(date)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
ggplot(mhi_email, aes(date)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
library(ggpubr)
install.packages(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
ggplot(mhi_email, aes(date)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
library(ggplot2)
library(reshape2)
library(ggpubr)
theme_set(theme_pubr())
ggplot(mhi_email, aes(date)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
ggplot(mhi_email, aes(from)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
library(dplyr)
df <- mhi_email %>%
group_by(date) %>%
summarise(counts = n())
df
ggplot(df, aes(x = date, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean()
ggplot(df, aes(x = date, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Graph sender frequency
ggplot(mhi_email, aes(from)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
# Compute the frequency.
library(dplyr)
sf <- mhi_email %>%
group_by(from) %>%
summarise(counts = n())
sf
# Create bar plot.
ggplot(sf, aes(x = from, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create bar plot.
ggplot(sf, aes(x = from, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sfd <- mhi_email %>%
group_by(date) %>%
summarise(counts = n())
sfd
sfd
mhi_email$from[,1]
mhi_email$from[1,]
mhi_email$from[1]
mhi_email[,1]
mhi_email[1,]
sfd1 <- mhi_email[which(mhi_email$from == "ihpme.mhi.grad@utoronto.ca"),]
sfd <- sfd1 %>%
group_by(date) %>%
summarise(counts = n())
sfd
ggplot(sfd, aes(x = date, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(mhi_email, aes(date)) + geom_point() + facet_grid(~ from)
ggplot(mhi_email, aes(date, date)) + geom_point() + facet_grid(~ from)
ggplot(mhi_email, aes(date, type)) +
geom_point() +
facet_grid(~ from) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sfd <- mhi_email %>%
group_by(date, from) %>%
summarise (n = n())
sfd
sfd
sfd$date
sfd$from
sfd$date
ggplot(sfd, aes(date, counts)) +
geom_point() +
facet_grid(~ from) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sfd, aes(date, n)) +
geom_point() +
facet_grid(~ from) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sfd <- mhi_email %>%
group_by(date, from) %>%
summarise (n = n())
sfd
sfd[1,]
sfd[1]
sfd[,1]
View(sfd)
ggplot(sfd, aes(date, from)) + geom_point() + facet_grid(~ n)
ggplot(sfd, aes(from, n)) +
geom_point() +
facet_grid(~ date) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sfd, aes(from, n)) +
geom_point() +
facet_grid(~ n) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sfd, aes(date, from)) +
geom_point() +
facet_grid(~ n) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sfd, aes(date, n)) +
geom_point() +
facet_grid(~ from) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sfd, aes(date, n)) +
geom_point() +
facet_grid(~ from) +
theme_pubclean()
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
# Categorize hospital overall rating
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("Low Hospital Quality", "High Hospital Quality"))
write.csv(hoq, file = "nomRating.csv")
str(hoq)
# Balanced nomRating.csv using Weka classbalancer
# False instances were down sampled to match the true instances (i.e., from )
#
3399-964
length(which(hoq$h_rating == "High Hospital Quality"))
length(which(hoq$h_rating == "Low Hospital Quality"))
pwd
# Should national average rating be numericized?
dt <- read.csv(file="nomRating-balanced.csv", header = TRUE, stringsAsFactors=TRUE)
964*2
dt$h_imaging[1,]
dt$h_imaging[,1]
dt$h_imaging[1]
dt$h_imaging[2]
dt$h_imaging[3]
View(dt)
# Balanced nomRating.csv using Weka classbalancer = nomRating-balanced.csv
# False instances were down sampled to match the true instances (i.e., from 2435 to 964)
# Divide into two sets
nomR <- read.csv(file="nomRating-balanced.csv", header = TRUE, stringsAsFactors=TRUE)
nomR[1,]
nomR[,1]
nomR[,2]
nomR[,3]
length(nomR[,1])
nomR$h_rating[964]
nomR$h_rating[965]
3399-964
2435/2
2435-1218
2435/964
length(nomR[1:964,2:13])
964-1
965+963
d_one <- rbind(nomR[1:964,2:13], nomR[965:1928,2:13])
View(d_one)
1929+963
2893+963
3399-2893
964*2
3399-964
964*3

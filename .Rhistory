g2
g2 <- ggplot(data = mhi_email, aes(x = date, y = from, fill = category)) + geom_bar(stat = "identity", position = position_dodge()) + xlab("Frequency of Father Visits") + ylab("Percent of Children")
g2
barplot(table(mhi_email$from))
barplot(table(mhi_email$date))
gg <- melt(df,id="date",value.name="Freq", variable.name="Type")
ggplot(gg, aes(x=date, y=Freq, fill=Type))+
geom_bar(stat="identity")+
facet_grid(Type~.)
gg <- melt(mhi_email,id="date",value.name="Freq", variable.name="Sender")
ggplot(gg, aes(x=date, y=Freq, fill=Sender))+
geom_bar(stat="identity")+
facet_grid(Sender~.)
View(mhi_email)
View(mhi_email)
str(mhi_email)
length(mhi_email$date)
? which
mhi_email$from
summary(mhi_email$from)
which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca")
mhi_email$date
mhi_email[,1]
mhi_email[20]
mhi_email[,20]
mhi_email[20,]
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"),]
str(oneFrom)
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"),]
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"), c("date","from","to","cc")]
oneFrom <- mhi_email[which(mhi_email$from == "ihpme-mhi-2018-l@listserv.utoronto.ca, ihpme.events@utoronto.ca"), c("date","from","to","cc")]
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from~.)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))+
geom_bar(stat="identity")+
facet_grid(from)
gg <- melt(oneFrom,id="date",value.name="Freq", variable.name="from")
ggplot(gg, aes(x=date, y=Freq, fill=from))
onlyStat <- mhi_email[, c("date","from","to","cc")]
mhi_email <- read.csv(file="~/Education/UofToronto (2018-2019)/mhi-email.csv", header = TRUE)
library(ggplot2)
library(reshape2)
onlyStat <- mhi_email[, c("date","from","to","cc")]
str(mhi_email)
gg2 <- melt(onlyStat, id='group')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = group, y = value, fill = variable)) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = variable)) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
gg2 <- melt(onlyStat, id="date")
ggplot(gg2, aes(x = date, y = value, fill = "from")) +
# `geom_col()` uses `stat_identity()`: it leaves the data as is.
geom_col(position = 'dodge')
barplot(table(mhi_email$date))
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("caTools", "cli", "devtools", "digest", "evaluate", "fansi", "foreign", "ggplot2", "git2r", "MASS", "Matrix", "mgcv", "mime", "openssl", "pkgconfig", "R6", "Rcpp", "reshape", "rstudioapi", "scales", "stringi", "survival", "tinytex", "xfun", "yaml"))
knitr::opts_chunk$set(echo = TRUE)
barplot(table(mhi_email$date))
barplot(table(mhi_email$from))
barplot(table(mhi_email$date))
type(mhi_email$date)
typeof(mhi_email$date)
mhi_email$date[2]
as.Date(mhi_email$date, "%Y-%m-%d")
# Sanitize date
mhi_email$date <- format(as.Date(mhi_email$date, "%Y-%m-%d"), format="%m-%d")
library(formatR)
install.packages("formatR")
library(formatR)
# Set to wrap long lines in R
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
mhi_email
mhi_email$from
unique(mhi_email$from)
plot(cars)
##install.packages("e1071")
library("e1071")
install.packages("e1071")
library("e1071")
install.packages("MASS", "caret", "ggthemes", "gridExtra", "corrplot", "plyr")
install.packages("MASS", "ggthemes", "gridExtra", "corrplot", "plyr")
install.packages("MASS")
install.packages("caret")
install.packages("ggthemes")
install.packages("gridExtra")
install.packages("corrplot")
install.packages("plyr")
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(plyr)
library(corrplot)
library(ggplot2)
hoq <- read.csv(file="../dataset/final_hoq.csv", header = TRUE)
str(db_churn)
hoq <- read.csv(file="../dataset/final_hoq.csv", header = TRUE)
str(hoq)
summary(hoq)
sapply(hoq,function(x) sum(is.na(x)))
sapply(hoq,function(x) sum(is.na(x)))
install.packages("gplots")
library(gplots)
dt <- as.table(as.matrix(hoq))
balloonplot(t(dt), main="Hospital Overall Ratings", xlab="", ylab="", label=FALSE, show.margins=FALSE)
dt
summary(dt)
type(dt)
dt <- as.table(as.matrix(hoq))
dt
summary(dt)
hoq[1]
hoq[1,1]
hoq[,1]
hoq[1,]
hoq[1,]$h_type
hoq[1,]$h_ownership
dt
head(dt)
dt[1,]
dt[,1]
dt[1,1]
dt[1,2]
dt[1,3]
clear
clear()
library(dplyr)
hoq$h_type
hoq$h_es
hoq$h_ehr
hoq$h_rating
hoq$h_mortality
hoq$h_soc
hoq$h_ra
hoq$h_pex
hoq$h_eoc
hoq$h_toc
# Compute the frequency.
library(dplyr)
summary(hoq$h_mortality)
hoq[1,]
hoq[,1]
hoq[1,]
library(knitr)
library(formatR)
# Set to wrap long lines in R
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
write.csv(hoq, file = "nomRating.csv")
str(hoq)
0.5*0.5
setwd("~/repos/ckme136-capstone/")
setwd("~/repos/ckme136-capstone/")
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/nomRating-balanced.csv", header = TRUE, stringsAsFactors=TRUE)
hoq
hoq$h_es
hoq$h_ehr
hoq$h_mortality
ggplot(hoq, aes(x=hoq$h_mortality)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
# Histogram overlaid with kernel density curve
ggplot(hoq, aes(x=hoq$h_mortality)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
# Histogram overlaid with kernel density curve
ggplot(hoq, aes(x=hoq$h_mortality)) +
geom_histogram(aes(y=..count..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
# Histogram overlaid with kernel density curve
ggplot(hoq, aes(x=hoq$h_mortality)) +
geom_histogram(binwidth=.5,
colour="black",
fill="white") +
# Overlay with transparent density plot
geom_density(alpha=.2, fill="#FF6666")
ggplot(hoq, aes(x=h_mortality)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
summary(hoq$h_mortality)
ggplot(hoq, aes(x=h_mortality, fill=h_rating)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
library(dplyr)
d_mortality <- hoq %>%
group_by(h_mortality) %>%
summarise(counts = n())
d_mortality
ggplot(data=d_mortality, aes(x = h_mortality, y = counts)) +
ggtitle("Mortality Frequency by National Comparison") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "National Comparison", y = "Count") +
scale_y_continuous(limits = c(0, 10)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(knitr)
library(formatR)
library(ggplot2)
library(reshape2)
library(ggpubr)
library(dplyr)
ggplot(data=d_mortality, aes(x = h_mortality, y = counts)) +
ggtitle("Mortality Frequency by National Comparison") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x = "National Comparison", y = "Count") +
scale_y_continuous(limits = c(0, 10)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
summary(hoq$h_mortality)
which(hoq$h_mortality == "'Not Available'")
count(which(hoq$h_mortality == "'Not Available'"))
sum(which(hoq$h_mortality == "'Not Available'"))
count(which(hoq$h_mortality == "'Not Available'"))
length(which(hoq$h_mortality == "'Not Available'"))
hoq$h_mortality[,1]
---
title: "Analysis Notebook"
author: "Jae Yong (Francisco) Lee"
date: '2018-11-19'
output:
pdf_document: default
html_notebook: default
---
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(knitr)
library(formatR)
# Set to wrap long lines in R
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
```
## Data Preparation
Data was sourced from [Kaggle](https://www.kaggle.com/center-for-medicare-and-medicaid/hospital-ratings)
```{r}
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
```
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_mortality
summary(hoq$h_mortality)
hoq$h_mortality[,1]
hoq$h_mortality[1,]
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
hoq$h_mortality
hoq$h_mortality[,1]
hoq$h_mortality[1,]
hoq$h_mortality[1]
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
summary(hoq$h_mortality)
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq$h_mortality
summary(hoq$h_mortality)
summary(hoq$h_soc)
etwd("~/repos/ckme136-capstone/")
setwd("~/repos/ckme136-capstone/")
hoq_na_gone <- read.csv(file="dataset/final_hoq_na_gone.csv", header = TRUE, stringsAsFactors=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq_na_gone <- read.csv(file="dataset/final_hoq_na_gone.csv", header = TRUE, stringsAsFactors=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/hoq_acute_only.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq_acute)
# Create ordered levels
hoq_acute$h_mortality <- ordered(hoq_acute$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_soc <- ordered(hoq_acute$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_ra <- ordered(hoq_acute$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_pex <- ordered(hoq_acute$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_eoc <- ordered(hoq_acute$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_toc <- ordered(hoq_acute$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_imaging <- ordered(hoq_acute$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_rating <- cut(hoq_acute$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
write.csv(hoq, file = "dataset/nomRating_acute_only.csv")
write.csv(hoq_acute, file = "dataset/nomRating_acute_only.csv")
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv")
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv")
kruskal.test(h_rating ~ ., data = hoq_acute)
kruskal.test(h_rating ~., data = hoq_acute)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/hoq_acute_only.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq_acute)
# Create ordered levels
hoq_acute$h_mortality <- ordered(hoq_acute$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_soc <- ordered(hoq_acute$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_ra <- ordered(hoq_acute$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_pex <- ordered(hoq_acute$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_eoc <- ordered(hoq_acute$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_toc <- ordered(hoq_acute$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_imaging <- ordered(hoq_acute$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_rating <- cut(hoq_acute$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv")
# Kruskal-Wallis Test
kruskal.test(h_rating ~ ., data = hoq_acute)
hoq_acute$h_es
hoq_acute$h_ehr
kruskal.test(h_rating ~ h_mortality, data = hoq_acute)
hoq_acute$h_soc
hoq_acute$h_mortality
hoq_acute$h_ra
hoq_acute$h_pex
hoq_acute$h_eoc
kruskal.test(h_rating ~ h_mortality, data = hoq_acute)
kruskal.test(h_rating ~ h_soc, data = hoq_acute)
kruskal.test(h_rating ~ h_ra, data = hoq_acute)
kruskal.test(h_rating ~ h_pex, data = hoq_acute)
kruskal.test(h_rating ~ h_eoc, data = hoq_acute)
kruskal.test(h_rating ~ h_toc, data = hoq_acute)
kruskal.test(h_rating ~ h_imaging, data = hoq_acute)
install.packages("FactoMineR")
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/hoq_acute_only.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq_acute)
hoq_acute$h_es[1]
hoq_acute$h_es[2]
summary(hoq_acute$h_es)
hoq_acute$h_mortality <- ordered(hoq_acute$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_soc <- ordered(hoq_acute$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_ra <- ordered(hoq_acute$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_pex <- ordered(hoq_acute$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_eoc <- ordered(hoq_acute$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_toc <- ordered(hoq_acute$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_imaging <- ordered(hoq_acute$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_rating <- cut(hoq_acute$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv")
kruskal.test(h_rating ~ h_mortality, data = hoq_acute)
kruskal.test(h_rating ~ h_soc, data = hoq_acute)
kruskal.test(h_rating ~ h_ra, data = hoq_acute)
kruskal.test(h_rating ~ h_pex, data = hoq_acute)
kruskal.test(h_rating ~ h_eoc, data = hoq_acute)
kruskal.test(h_rating ~ h_toc, data = hoq_acute)
kruskal.test(h_rating ~ h_imaging, data = hoq_acute)
hoq_acute
hoq_acute$h_es
kruskal.test(h_rating ~ h_ownership, data = hoq_acute)
kruskal.test(h_rating ~ h_es, data = hoq_acute)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/nomRating_acute.csv", header = TRUE, stringsAsFactors=TRUE)
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv", row.names = FALSE)
library(knitr)
library(formatR)
# Set to wrap long lines in R
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/hoq_acute_only.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq_acute)
hoq_acute$h_mortality <- ordered(hoq_acute$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_soc <- ordered(hoq_acute$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_ra <- ordered(hoq_acute$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_pex <- ordered(hoq_acute$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_eoc <- ordered(hoq_acute$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_toc <- ordered(hoq_acute$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_imaging <- ordered(hoq_acute$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv", row.names = FALSE)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/nomRating_acute.csv", header = TRUE, stringsAsFactors=TRUE)
summary(hoq_acute$h_ownership)
summary(hoq_acute$h_es)
summary(hoq_acute$h_rating)
summary(hoq_acute$h_mortality)
hoq_acute
hoq_acute$h_rating
summary(hoq_acute$h_rating)
summary(hoq_acute$h_mortality)
hoq_acute$h_rating <- cut(hoq_acute$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
summary(hoq_acute$h_rating)
summary(hoq_acute$h_mortality)
summary(hoq_acute$h_soc)
summary(hoq_acute$h_ra)
summary(hoq_acute$h_pex)
summary(hoq_acute$h_eoc)
summary(hoq_acute$h_toc)
summary(hoq_acute$h_imaging)
library(FactoMineR)
res = MFA(hoq_acute, group=c(9,2,2,3,3,3,3,3,3,3), type=c(rep("n",10)), ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
rep("n",10)
res = MFA(hoq_acute, group=c(9,2,2,3,3,3,3,3,3,3), type=c("n",rep("n",9)), ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,2,3,3,3,3,3,3,3), type=c("n", ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,2,3,3,3,3,3,3,3), type=c("n", ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/nomRating_acute.csv", header = TRUE, stringsAsFactors=TRUE)
library(FactoMineR)
res = MFA(hoq_acute, group=c(9,2,2,3,3,3,3,3,3,3), type=c("n","n","s",rep("n",7)), ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
summary(hoq_acute$h_rating)
res = MFA(hoq_acute, group=c(9,2,5,3,3,3,3,3,3,3), type=c("n","n","s",rep("n",7)), ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,5,3,3,3,3,3,3,3), type=c("n","n","c",rep("n",7)), ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,5,3,3,3,3,3,3,3), type=c("n","n","c","n","n","n","n","n","n","n", ncp=9, name.group=c("ownership","es","overall","mortality","soc","ra","pex","eoc","toc","imaging"), num.group.sup=c(1,6))
library(FactoMineR)
res = MFA(hoq_acute, group=c(9,2,5,3,3,3,3,3,3,3), type=c("n","n","c",
"n","n","n",
"n","n","n","n"), ncp=9,
name.group=c("ownership","es","overall",
"mortality","soc","ra","pex",
"eoc","toc","imaging"),
num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,5,3,3,3,3,3,3,3), type=c("s",rep("n",9)), ncp=9, name.group=c("ownership", "es", "overall", "mortality", "soc", "ra", "pex", "eoc", "toc", "imaging"), num.group.sup=c(1,6))
res = MFA(hoq_acute, group=c(9,2,5), type=c("s",rep("n",9)), ncp=9, name.group=c("ownership", "es", "overall", "mortality", "soc", "ra", "pex", "eoc", "toc", "imaging"), num.group.sup=c(1,6))
data(wine)
res = MFA(wine, group=c(2,5,3,10,9,2), type=c("n",rep("s",5)), ncp=5, name.group=c("origin","odor","visual","odor.after.shaking", "taste","overall"), num.group.sup=c(1,6))
# Kruskal-Wallis Test for National Comparison
kruskal.test(h_rating ~ h_mortality, data = hoq_acute)
kruskal.test(h_rating ~ h_soc, data = hoq_acute)
kruskal.test(h_rating ~ h_ra, data = hoq_acute)
kruskal.test(h_rating ~ h_pex, data = hoq_acute)
kruskal.test(h_rating ~ h_eoc, data = hoq_acute)
kruskal.test(h_rating ~ h_toc, data = hoq_acute)
kruskal.test(h_rating ~ h_imaging, data = hoq_acute)
# Kruskal-Wallis Test
kruskal.test(h_rating ~ h_ownership, data = hoq_acute)
kruskal.test(h_rating ~ h_es, data = hoq_acute)
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(knitr)
library(formatR)
# Set to wrap long lines in R
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq_acute <- read.csv(file="dataset/hoq_acute_only.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq_acute)
# Create ordered levels
hoq_acute$h_mortality <- ordered(hoq_acute$h_mortality, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_soc <- ordered(hoq_acute$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_ra <- ordered(hoq_acute$h_ra, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_pex <- ordered(hoq_acute$h_pex, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_eoc <- ordered(hoq_acute$h_eoc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_toc <- ordered(hoq_acute$h_toc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute$h_imaging <- ordered(hoq_acute$h_imaging, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
hoq_acute
hoq_acute$h_rating
summary(hoq_acute$h_rating)
sd(hoq_acute$h_rating)
hoq_acute$h_rating <- cut(hoq_acute$h_rating, breaks=c(0, 3, 5), labels=c("LHQ", "HHQ"))
setwd("~/repos/ckme136-capstone/")
write.csv(hoq_acute, file = "dataset/nomRating_acute.csv", row.names = FALSE)
setwd("~/repos/ckme136-capstone/")
hoq_test <- read.csv(file="dataset/Hospital General Information.csv", header = TRUE, stringsAsFactors=TRUE)
hoq_test$Hospital.overall.rating
Summary(hoq_test$Hospital.overall.rating)
summary(hoq_test$Hospital.overall.rating)
which(hoq_test$Hospital.overall.rating == "Not Available")
length(which(hoq_test$Hospital.overall.rating == "Not Available"))
kruskal.test(h_rating ~ h_mortality, data = hoq_acute)
kruskal.test(h_rating ~ h_soc, data = hoq_acute)
kruskal.test(h_rating ~ h_ra, data = hoq_acute)
kruskal.test(h_rating ~ h_pex, data = hoq_acute)
kruskal.test(h_rating ~ h_eoc, data = hoq_acute)
kruskal.test(h_rating ~ h_toc, data = hoq_acute)
kruskal.test(h_rating ~ h_imaging, data = hoq_acute)
# Kruskal-Wallis Test
kruskal.test(h_rating ~ h_ownership, data = hoq_acute)
kruskal.test(h_rating ~ h_es, data = hoq_acute)

text(3.1, 0.85, "0.099", col = "blue")
text(4.3, 0.25, "0.003", col = "blue")
barplot(prop.table(oneTable), main="Frequency Distribution of Tire Traction Rating",
xlab="Traction Rating", ylim=c(0,1))
text(0.7, 0.85, "0.795", col = "blue")
text(1.9, 0.15, "0.101", col = "blue")
text(3.1, 0.15, "0.099", col = "blue")
text(4.3, 0.1, "0.003", col = "blue")
barplot(prop.table(oneTable), main="Frequency Distribution of Tire Traction Rating",
xlab="Traction Rating", ylim=c(0,1))
text(0.7, 0.85, "0.795", col = "blue")
text(1.9, 0.15, "0.101", col = "blue")
text(3.1, 0.15, "0.099", col = "blue")
text(4.3, 0.05, "0.003", col = "blue")
nrow(tireData)
432/543
sum(prop.table(oneTable))
barplot(prop.table(oneTable), main="Frequency Distribution of Tire Traction Rating",
xlab="Traction Rating", ylim=c(0,1))
text(0.7, 0.85, "0.795", col = "blue")
text(1.9, 0.15, "0.101", col = "blue")
text(3.1, 0.15, "0.099", col = "blue")
text(4.3, 0.05, "0.003", col = "blue")
barplot(prop.table(oneTable), main="Relative Frequency Histogram of Tire Traction Rating",
xlab="Traction Rating", ylim=c(0,1))
text(0.7, 0.85, "0.795", col = "blue")
text(1.9, 0.15, "0.101", col = "blue")
text(3.1, 0.15, "0.099", col = "blue")
text(4.3, 0.05, "0.003", col = "blue")
0.795+0.101+0.099+0.003
View(tireData)
barplot(prop.table(oneTable), main="Relative Frequency Histogram of Tire Traction Rating",
xlab="Traction Rating", ylim=c(0,1))
text(0.7, 0.85, "0.795", col = "blue")
text(1.9, 0.15, "0.101", col = "blue")
text(3.1, 0.15, "0.099", col = "blue")
text(4.3, 0.05, "0.003", col = "blue")
pwd
cwd
work
mitbih_train <- read.csv("~/Education/Ryerson (2018)/capstone/heartbeat/mitbih_train.csv")
9.601139426231384277e-01
9.601139426231384277e-02
train <- c(0.9601, 0.8632, 0.416, 0.1965, 0.09401, 0.1253, 0.09971, 0.088319)
plot(train)
mitbih_train <- read.csv("~/Education/Ryerson (2018)/capstone/heartbeat/mitbih_train.csv")
head(mitbih_train)
plot(mitbih_train[1,])
plot(mitbih_train[,1])
plot(mitbih_train[1:1000,1])
plot(mitbih_train[1,1:1000])
plot(mitbih_train[1,1])
plot(mitbih_train[1,100])
plot(mitbih_train[1,1:100])
plot(mitbih_train[1,1:10])
data(ECG)
plot(ECG)
plot(ecg)
data(ecg)
if (requireNamespace("waveslim") == TRUE) {
data(ecg)
ecg.level <- haar2level(ecg)
ecg.haar <- orthobasis.haar(length(ecg))
ecg.mld <- mld(ecg, ecg.haar, ecg.level, plot = FALSE)
res <- cbind.data.frame(apply(ecg.mld[,1:5],1,sum), ecg.mld[,6:11])
par(mfrow = c(8,1))
par(mar = c(2, 5, 1.5, 0.6))
plot(as.ts(ecg), ylab = "ECG")
apply(res, 2, function(x) plot(as.ts(x), ylim = range(res),
ylab = ""))
par(mfrow = c(1,1))
}
install.packages("waveslim")
library("waveslim")
if (requireNamespace("waveslim") == TRUE) {
data(ecg)
ecg.level <- haar2level(ecg)
ecg.haar <- orthobasis.haar(length(ecg))
ecg.mld <- mld(ecg, ecg.haar, ecg.level, plot = FALSE)
res <- cbind.data.frame(apply(ecg.mld[,1:5],1,sum), ecg.mld[,6:11])
par(mfrow = c(8,1))
par(mar = c(2, 5, 1.5, 0.6))
plot(as.ts(ecg), ylab = "ECG")
apply(res, 2, function(x) plot(as.ts(x), ylim = range(res),
ylab = ""))
par(mfrow = c(1,1))
}
ecg <- mitbih_train
if (requireNamespace("waveslim") == TRUE) {
data(ecg)
ecg.level <- haar2level(ecg)
ecg.haar <- orthobasis.haar(length(ecg))
ecg.mld <- mld(ecg, ecg.haar, ecg.level, plot = FALSE)
res <- cbind.data.frame(apply(ecg.mld[,1:5],1,sum), ecg.mld[,6:11])
par(mfrow = c(8,1))
par(mar = c(2, 5, 1.5, 0.6))
plot(as.ts(ecg), ylab = "ECG")
apply(res, 2, function(x) plot(as.ts(x), ylim = range(res),
ylab = ""))
par(mfrow = c(1,1))
}
data(ecg)
plot(ecg[1:10])
plot(ecg[1,])
par("mar")
dev.off()
plot(ecg[1,])
plot(ecg[1,])
par("mar")
plot(ecg[1,])
par(mar=c(1,1,1,1))
plot(ecg[1,])
plot(ecg[1,1:12])
hist(ecg[1,1:12])
hist(ecg[0,1
])
source("http://biostatmatt.com/R/ecg.R")
require(lattice)
mitbih_train <- read.csv("~/Education/Ryerson (2018)/capstone/heartbeat/mitbih_train.csv")
#ff should be the output of the fft function
amplitude <- function( x ) { sqrt(Re(x)^2+Im(x)^2) }
phase     <- function( x ) { atan(Im(x)/Re(x)) }
#sinc function of frequency f
sinc      <- function( x, f ) { ifelse(x==0, 2*pi*f, sin(2*pi*f*x)/x) }
#Blackman window from 0..m
Blackman  <- function( m ) { 0.42-0.5*cos(2*pi*(0:m)/m)+0.08*cos(4*pi*(0:m)/m) }
#Hamming window from 0..m
Hamming   <- function( m ) { 0.54-0.46*cos(2*pi*(0:m)/m) }
#simple low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
lpf <- function( y, t, f ) {
rc <- 1 / ( 2 * pi * f )
a  <- t / ( t + rc )
n  <- length( y )
yf <- y
for( i in 2:length(y) ) {
yf[i] <- a * y[i] + (1-a) * yf[i-1]
}
return( yf )
}
#windowed sinc low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
wlpf <- function( y, t, f ) {
m  <- min(floor(length(y)/2), 500)
#generate the sinc kernel
rk <- sinc(-m:m, f*t)
#apply the Blackman window
bk <- Blackman(2*m) * rk
#pad the filter with zeros
k  <- c(bk, rep(0,length(y)-length(bk)))
#convolve y with the filter kernel
fy  <- fft(fft(k)*fft(y), inverse=TRUE)
return(Re(fy))
}
dat  <- scan("http://biostatmatt.com/csv/ecg.csv")
dat  <- ( dat - mean(dat) ) / sd(dat)
#filter high frequency noise
fdat <- wlpf(dat, 1/1000, 30)
fdat <- (fdat-mean(fdat))/sd(fdat)
#isolate respiration bias
rdat <- wlpf(dat, 1/1000, 1)
rdat <- (rdat-mean(rdat))/sd(rdat)
#subtract respiration bias from ecg signal
edat <- fdat - rdat
require(lattice)
xplot <- rep((0:(length(dat)-1))/1000,4)
yplot <- c(dat, fdat, rdat, edat)
gplot <- c(rep("Raw",length(dat)),
rep("High Frequency Filter",length(dat)),
rep("Low Frequency Filter",length(dat)),
rep("ECG",length(dat)))
tp <- xyplot(yplot~xplot|gplot,type="l",layout=c(1,4), xlab="Time", ylab="V")
#uncomment the following to save an image
#trellis.device(png, file="ecgfilter.png", height=750, width=750)
print(tp)
#dev.off()
amplitude(ecg[1,])
dat <- scan(mitbih_train)
ecg <- read.csv(url="http://biostatmatt.com/csv/ecg.csv")
ecg
ecg <- read.csv("http://biostatmatt.com/csv/ecg.csv")
head(ecg)
View(ecg)
ecg[1,]
ecg[1,1]
ecg[,1]
dat <- scan(mitbih_train[1,])
dat <- scan(c(mitbih_train[1,]))
dat <- scan(toString(mitbih_train[1,]))
#dat  <- scan("http://biostatmatt.com/csv/ecg.csv")
dat  <- ( dat - mean(dat) ) / sd(dat)
#ff should be the output of the fft function
amplitude <- function( x ) { sqrt(Re(x)^2+Im(x)^2) }
phase     <- function( x ) { atan(Im(x)/Re(x)) }
#sinc function of frequency f
sinc      <- function( x, f ) { ifelse(x==0, 2*pi*f, sin(2*pi*f*x)/x) }
#Blackman window from 0..m
Blackman  <- function( m ) { 0.42-0.5*cos(2*pi*(0:m)/m)+0.08*cos(4*pi*(0:m)/m) }
#Hamming window from 0..m
Hamming   <- function( m ) { 0.54-0.46*cos(2*pi*(0:m)/m) }
#simple low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
lpf <- function( y, t, f ) {
rc <- 1 / ( 2 * pi * f )
a  <- t / ( t + rc )
n  <- length( y )
yf <- y
for( i in 2:length(y) ) {
yf[i] <- a * y[i] + (1-a) * yf[i-1]
}
return( yf )
}
#windowed sinc low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
wlpf <- function( y, t, f ) {
m  <- min(floor(length(y)/2), 500)
#generate the sinc kernel
rk <- sinc(-m:m, f*t)
#apply the Blackman window
bk <- Blackman(2*m) * rk
#pad the filter with zeros
k  <- c(bk, rep(0,length(y)-length(bk)))
#convolve y with the filter kernel
fy  <- fft(fft(k)*fft(y), inverse=TRUE)
return(Re(fy))
}
dat <- scan(toString(mitbih_train[1,]))
#dat  <- scan("http://biostatmatt.com/csv/ecg.csv")
dat  <- ( dat - mean(dat) ) / sd(dat)
#filter high frequency noise
fdat <- wlpf(dat, 1/1000, 30)
fdat <- (fdat-mean(fdat))/sd(fdat)
#isolate respiration bias
rdat <- wlpf(dat, 1/1000, 1)
rdat <- (rdat-mean(rdat))/sd(rdat)
#subtract respiration bias from ecg signal
edat <- fdat - rdat
require(lattice)
xplot <- rep((0:(length(dat)-1))/1000,4)
yplot <- c(dat, fdat, rdat, edat)
gplot <- c(rep("Raw",length(dat)),
rep("High Frequency Filter",length(dat)),
rep("Low Frequency Filter",length(dat)),
rep("ECG",length(dat)))
tp <- xyplot(yplot~xplot|gplot,type="l",layout=c(1,4), xlab="Time", ylab="V")
#uncomment the following to save an image
#trellis.device(png, file="ecgfilter.png", height=750, width=750)
print(tp)
#dev.off()
mitbih_train <- read.csv("~/Education/Ryerson (2018)/capstone/heartbeat/mitbih_train.csv")
ecg <- read.csv("http://biostatmatt.com/csv/ecg.csv")
#ff should be the output of the fft function
amplitude <- function( x ) { sqrt(Re(x)^2+Im(x)^2) }
phase     <- function( x ) { atan(Im(x)/Re(x)) }
#sinc function of frequency f
sinc      <- function( x, f ) { ifelse(x==0, 2*pi*f, sin(2*pi*f*x)/x) }
#Blackman window from 0..m
Blackman  <- function( m ) { 0.42-0.5*cos(2*pi*(0:m)/m)+0.08*cos(4*pi*(0:m)/m) }
#Hamming window from 0..m
Hamming   <- function( m ) { 0.54-0.46*cos(2*pi*(0:m)/m) }
#simple low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
lpf <- function( y, t, f ) {
rc <- 1 / ( 2 * pi * f )
a  <- t / ( t + rc )
n  <- length( y )
yf <- y
for( i in 2:length(y) ) {
yf[i] <- a * y[i] + (1-a) * yf[i-1]
}
return( yf )
}
#windowed sinc low pass filter
#y - vector to filter
#t - time interval between measurements (s)
#f - low pass frequency (Hz)
wlpf <- function( y, t, f ) {
m  <- min(floor(length(y)/2), 500)
#generate the sinc kernel
rk <- sinc(-m:m, f*t)
#apply the Blackman window
bk <- Blackman(2*m) * rk
#pad the filter with zeros
k  <- c(bk, rep(0,length(y)-length(bk)))
#convolve y with the filter kernel
fy  <- fft(fft(k)*fft(y), inverse=TRUE)
return(Re(fy))
}
dat <- scan(toString(mitbih_train[1,]))
#dat  <- scan("http://biostatmatt.com/csv/ecg.csv")
dat  <- ( dat - mean(dat) ) / sd(dat)
#filter high frequency noise
fdat <- wlpf(dat, 1/1000, 30)
fdat <- (fdat-mean(fdat))/sd(fdat)
#isolate respiration bias
rdat <- wlpf(dat, 1/1000, 1)
rdat <- (rdat-mean(rdat))/sd(rdat)
#subtract respiration bias from ecg signal
edat <- fdat - rdat
require(lattice)
xplot <- rep((0:(length(dat)-1))/1000,4)
yplot <- c(dat, fdat, rdat, edat)
gplot <- c(rep("Raw",length(dat)),
rep("High Frequency Filter",length(dat)),
rep("Low Frequency Filter",length(dat)),
rep("ECG",length(dat)))
tp <- xyplot(yplot~xplot|gplot,type="l",layout=c(1,4), xlab="Time", ylab="V")
#uncomment the following to save an image
#trellis.device(png, file="ecgfilter.png", height=750, width=750)
print(tp)
#dev.off()
mitbih_train[1,]
length(mitbih_train[1,])
? scan
dat <- scan(mitbih_train[1,])
dat <- scan(mitbih_train)
dat <- scan(mitbih_train[1,])
dat <- scan(mitbih_train[,1])
87553*188
mitbih_train[,1]
mitbih_train[1,188]
mitbih_train[1,187]
mitbih_train[1,186]
ptbdb_normal <- read.csv("~/Education/Ryerson (2018)/capstone/heartbeat/ptbdb_normal.csv")
head(ptbdb_normal)
ptbdb_normal[1,1]
ptbdb_normal[1,2]
ptbdb_normal[1,3]
ptbdb_normal[1,188]
ptbdb_normal[1,187]
ptbdb_normal[4045,188]
ptbdb_normal[4045,1]
plot(ptbdb_normal[1,])
plot(ptbdb_normal[,1])
plot(ptbdb_normal[1000,1])
hist(ptbdb_normal[1,])
hist(ptbdb_normal[,1])
hist(ptbdb_normal[1,])
View(ptbdb_normal)
View(ptbdb_normal)
ptbdb_normal[0,1]
ptbdb_normal[1,1]
ptbdb_normal[1,2]
ptbdb_normal[1,3]
plot(ptbdb_normal[1,1:10])
plot(ptbdb_normal[1,])
par("mar")
par(mar=c(1,1,1,1))
plot(ptbdb_normal[1,])
plot(ptbdb_normal[1,c(1,10)])
plot(ptbdb_normal[1,10])
plot(ptbdb_normal[1,9])
View(tireData)
View(tireData)
pwd
cwd
explore <- read.csv(file="~/Education/Ryerson (2018)/capstone/Explore.csv", header = TRUE)
explore
summary(explore$X.Safety.of.care.national.comparison.)
explore$X.Hospital.overall.rating.
summary(explore$X.Hospital.overall.rating.)
factor(explore$X.Hospital.overall.rating.)
summary(explore$X.Hospital.overall.rating.)
explore <- read.csv(file="~/Education/Ryerson (2018)/capstone/Explore.csv", header = TRUE)
explore$X.Hospital.overall.rating. <- as.factor(explore$X.Hospital.overall.rating.)
summary(explore$X.Hospital.overall.rating.)
103+658
103+658+1674
sum(summary(explore$X.Hospital.overall.rating.))
2435/3399
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE)
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE)
hoq[1]
hoq[[1]]
hoq[1][1]
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE)
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE)
str(hoq)
summary(h_soc
)
summary(hoq$h_soc)
h_soc_order <- ordered(hoq$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
summary(h_soc_order)
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
h_soc_order <- ordered(hoq$h_soc, levels = c("Not Available", "Below the national average", "Same as the national average", "Above the national average"))
summary(h_soc_order)
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
h_soc_order <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
summary(h_soc_order)
h_soc_order
length(hoq[1]
)
length(hoq[[1]])
length(hoq[1,])
createOrder <- function(i) {
for(j in 1:length(i[1,])) {
print("Test"+j)
}
}
createOrder(hoq)
createOrder <- function(i) {
for(j in 1:length(i[1,])) {
print("Test")
}
}
createOrder(hoq)
length(createOrder(hoq))
hoq[1]
hoq[[1]]
hoq[1]
hoq$h_eoc
hoq[1]
hoq[[1]]
hoq[[2]]
hoq[[8]]
createOrder <- function(i) {
for(j in 1:length(i[1,])) {
i[[j]] <- ordered(i[[j]], levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
}
}
createOrder(hoq)
hoq$h_pex
summary(hoq$h_pex)
hoq[1]
hoq[9]
hoq[8]
hoq[[8]]
createOrder
hoq$h_type
createOrder
hoq <- read.csv(file="~/Education/Ryerson (2018)/capstone/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging
str(hoq)
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
str(hoq)
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("Low Hospital Quality", "High Hospital Quality"))
hoq$h_rating
summary(hoq$h_rating)
str(hoq)
summary(hoq$h_type)
summary(hoq$h_rating)
2849+550
2435+964
hoq <- read.csv(file="../dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
# Categorize hospital overall rating
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("Low Hospital Quality", "High Hospital Quality"))
str(hoq)
hoq <- read.csv(file="../dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
pwd
setwd("~/")
wd
? wd
??Wd
getwd
getwd)
getwd()
setwd("~/")
getwd()
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="~/dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="/dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="../dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
setwd("~/repos/ckme136-capstone/")
hoq <- read.csv(file="dataset/final_hoq.csv", header = TRUE, stringsAsFactors=TRUE)
str(hoq)
# Create ordered levels
hoq$h_mortality <- ordered(hoq$h_mortality, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_soc <- ordered(hoq$h_soc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_ra <- ordered(hoq$h_ra, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_pex <- ordered(hoq$h_pex, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_eoc <- ordered(hoq$h_eoc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_toc <- ordered(hoq$h_toc, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
hoq$h_imaging <- ordered(hoq$h_imaging, levels = c("'Not Available'", "'Below the national average'", "'Same as the national average'", "'Above the national average'"))
# Categorize hospital overall rating
hoq$h_rating <- cut(hoq$h_rating, breaks=c(0, 3, 5), labels=c("Low Hospital Quality", "High Hospital Quality"))
str(hoq)
hoq$h_rating
write.csv(hoq, file = "nomRating.csv")
